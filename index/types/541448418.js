// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["541448418"] = [{"values":[{"sourceSpan":{"start":[186,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Replace.purs","end":[190,32]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"breakCap","moduleName":"Parsing.String.Replace","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple","Nested"],"T3"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"#### Break on and capture one pattern\n\nFind the first occurence of a pattern in the input `String`, capture the found\npattern, and break the input `String` on the found pattern.\n\nThis function can be used instead of\n[Data.String.indexOf](https://pursuit.purescript.org/packages/purescript-strings/docs/Data.String#v:indexOf)\nor\n[Data.String.Regex.search](https://pursuit.purescript.org/packages/purescript-strings/docs/Data.String.Regex#v:search)\nor\n[Data.String.Regex.replace](https://pursuit.purescript.org/packages/purescript-strings/docs/Data.String.Regex#v:replace)\nand it allows using a parser for the pattern search.\n\nThis function can be used instead of\n[Data.String.takeWhile](https://pursuit.purescript.org/packages/purescript-strings/docs/Data.String#v:takeWhile)\nor\n[Data.String.dropWhile](https://pursuit.purescript.org/packages/purescript-strings/docs/Data.String#v:dropWhile)\nand it is predicated beyond more than just the next single `CodePoint`.\n\n#### Output\n\n- `Nothing` when no pattern match was found.\n- `Just (prefix /\\ parse_result /\\ suffix)` for the result of parsing the\n  pattern match, and the `prefix` string before and the `suffix` string\n  after the pattern match. `prefix` and `suffix` may be zero-length strings.\n\n#### Access the matched section of text\n\nTo capture the matched string combine the pattern\nparser `sep` with the `match` combinator.\n\nWith the matched string, we can reconstruct the input string.\nFor all `input`, `sep`, if\n\n```purescript\nlet (Just (prefix /\\ (infix /\\ _) /\\ suffix)) =\n      breakCap input (match sep)\n```\n\nthen\n\n```purescript\ninput == prefix <> infix <> suffix\n```\n#### Example\n\nFind the first pattern match and break the input string on the pattern.\n\n```purescript\nbreakCap \"hay needle hay\" (string \"needle\")\n```\n\nResult:\n\n```purescript\nJust (\"hay \" /\\ \"needle\" /\\ \" hay\")\n```\n\n#### Example\n\nFind the first pattern match, capture the matched text and the parsed result.\n\n```purescript\nbreakCap \"abc 123 def\" (match intDecimal)\n```\n\nResult:\n\n```purescript\nJust (\"abc \" /\\ (\"123\" /\\ 123) /\\ \" def\")\n```\n"}],"tag":"SearchResult"}]