// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["657456726"] = [{"values":[{"sourceSpan":{"start":[500,1],"name":".spago/parsing/v10.2.0/src/Parsing.purs","end":[500,83]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"liftMaybe","moduleName":"Parsing","info":{"values":[{"type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Lift a `Maybe a` computation into a `ParserT`, with a note for\nthe `ParseError` message in case of `Nothing`.\n\nConsumes no parsing input, does not change the parser state at all.\nIf the `Maybe` computation is `Nothing`, then this will `fail` in the\n`ParserT` monad with the given error message `String` at the current input\n`Position`.\n\nThis is a “validation” function, for when we want to produce some\ndata from the parsing input or fail at the current\nparsing position if that’s impossible.\n\nFor example, parse an integer\n[`BoundedEnum`](https://pursuit.purescript.org/packages/purescript-enums/docs/Data.Enum#t:BoundedEnum)\ncode and validate it by turning it\ninto a `MyEnum`. Use `tryRethrow` to position the parse error at the\nbeginning of the integer in the input `String` if the `toEnum` fails.\n\n```\nrunParser \"3\" do\n  myenum :: MyEnum <- tryRethrow do\n    x <- intDecimal\n    liftMaybe (\\_ -> \"Bad MyEnum \" <> show x) $ toEnum x\n```\n"}],"tag":"SearchResult"}]