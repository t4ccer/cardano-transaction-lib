// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["1716748595"] = [{"values":[{"sourceSpan":{"start":[76,1],"name":".spago/parsing/v10.2.0/src/Parsing/String.purs","end":[76,39]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"eof","moduleName":"Parsing.String","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Match “end-of-file,” the end of the input stream.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[87,1],"name":".spago/parsing/v10.2.0/src/Parsing/String.purs","end":[87,42]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"rest","moduleName":"Parsing.String","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Match the entire rest of the input stream. Always succeeds.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[107,1],"name":".spago/parsing/v10.2.0/src/Parsing/String.purs","end":[107,53]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"anyCodePoint","moduleName":"Parsing.String","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","String","CodePoints"],"CodePoint"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Match any Unicode character.\nAlways succeeds when any input remains.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[102,1],"name":".spago/parsing/v10.2.0/src/Parsing/String.purs","end":[102,43]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"anyChar","moduleName":"Parsing.String","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Match any BMP `Char`.\nParser will fail if the character is not in the Basic Multilingual Plane.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[166,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[166,46]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"skipSpaces","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Skip whitespace characters satisfying `Data.CodePoint.Unicode.isSpace`\nand throw them away.\n\nAlways succeeds. Will only consume when some characters are skipped.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[159,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[159,48]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"whiteSpace","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Match zero or more whitespace characters satisfying\n`Data.CodePoint.Unicode.isSpace`.\n\nAlways succeeds. Will consume only when matched whitespace string\nis non-empty.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[104,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[104,44]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"number","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parser based on the __Data.Number.fromString__ function.\n\nThis should be the inverse of `show :: Number -> String`.\n\nExamples of strings which can be parsed by this parser:\n* `\"3\"`\n* `\"3.0\"`\n* `\".3\"`\n* `\"-0.3\"`\n* `\"+0.3\"`\n* `\"-3e-1\"`\n* `\"-3.0E-1.0\"`\n* `\"NaN\"`\n* `\"-Infinity\"`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[137,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[137,45]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"intDecimal","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parser based on the __Data.Int.fromString__ function.\n\nThis should be the inverse of `show :: Int -> String`.\n\nExamples of strings which can be parsed by this parser:\n* `\"3\"`\n* `\"-3\"`\n* `\"+300\"`\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[87,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[87,44]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"alphaNum","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse an alphabetical or numerical character.\nMatches any char that satisfies `Data.CodePoint.Unicode.isAlphaNum`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[74,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[74,41]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"upper","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse an uppercase letter.  Matches any char that satisfies `Data.CodePoint.Unicode.isUpper`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[70,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[70,41]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"lower","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse a lowercase letter.  Matches any char that satisfies `Data.CodePoint.Unicode.isLower`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[78,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[78,41]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"space","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse a space character.  Matches any char that satisfies `Data.CodePoint.Unicode.isSpace`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[82,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[82,42]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"letter","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse an alphabetical character.  Matches any char that satisfies `Data.CodePoint.Unicode.isAlpha`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[66,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[66,44]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"octDigit","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse an octal digit.  Matches any char that satisfies `Data.CodePoint.Unicode.isOctDigit`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[62,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[62,44]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"hexDigit","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse a hex digit.  Matches any char that satisfies `Data.CodePoint.Unicode.isHexDigit`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[58,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Basic.purs","end":[58,41]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"digit","moduleName":"Parsing.String.Basic","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Parse a digit.  Matches any char that satisfies `Data.CodePoint.Unicode.isDecDigit`.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[41,1],"name":".spago/formatters/v7.0.0/src/Data/Formatter/Parser/Number.purs","end":[41,58]},"score":0,"packageInfo":{"values":["formatters"],"tag":"Package"},"name":"parseDigit","moduleName":"Data.Formatter.Parser.Number","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[36,1],"name":".spago/formatters/v7.0.0/src/Data/Formatter/Parser/Number.purs","end":[36,62]},"score":0,"packageInfo":{"values":["formatters"],"tag":"Package"},"name":"parseNumber","moduleName":"Data.Formatter.Parser.Number","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[23,1],"name":".spago/formatters/v7.0.0/src/Data/Formatter/Parser/Number.purs","end":[23,60]},"score":0,"packageInfo":{"values":["formatters"],"tag":"Package"},"name":"parseInteger","moduleName":"Data.Formatter.Parser.Number","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[74,1],"name":".spago/formatters/v7.0.0/src/Data/Formatter/Parser/Interval.purs","end":[74,66]},"score":0,"packageInfo":{"values":["formatters"],"tag":"Package"},"name":"parseDateTime","moduleName":"Data.Formatter.Parser.Interval","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","DateTime"],"DateTime"]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]