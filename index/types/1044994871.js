// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["1044994871"] = [{"values":[{"sourceSpan":{"start":[312,1],"name":".spago/parsing/v10.2.0/src/Parsing/String.purs","end":[316,39]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"anyTill","moduleName":"Parsing.String","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Combinator which finds the first position in the input `String` where the\nphrase can parse. Returns both the\nparsed result and the unparsable input section searched before the parse.\nWill fail if no section of the input is parseable. To backtrack the input\nstream on failure, combine with `tryRethrow`.\n\nThis combinator works like\n[Data.String.takeWhile](https://pursuit.purescript.org/packages/purescript-strings/docs/Data.String#v:takeWhile)\nor\n[Data.String.Regex.search](https://pursuit.purescript.org/packages/purescript-strings/docs/Data.String.Regex#v:search)\nand it allows using a parser for the pattern search.\n\nThis combinator is equivalent to `manyTill_ anyCodePoint`, but it will be\nfaster because it returns a slice of the input `String` for the\nsection preceding the parse instead of a `List CodePoint`.\n\nBe careful not to look too far\nahead; if the phrase parser looks to the end of the input then `anyTill`\ncould be *O(nÂ²)*.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[184,1],"name":".spago/parsing/v10.2.0/src/Parsing/String.purs","end":[184,77]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"match","moduleName":"Parsing.String","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Combinator which returns both the result of a parse and the slice of\nthe input that was consumed while it was being parsed.\n"}],"tag":"SearchResult"}]