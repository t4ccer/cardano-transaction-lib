// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["1477872172"] = [{"values":[{"sourceSpan":{"start":[34,1],"name":".spago/web-file/v3.0.0/src/Web/File/Blob.purs","end":[34,47]},"score":2,"packageInfo":{"values":["web-file"],"tag":"Package"},"name":"fromArray","moduleName":"Web.File.Blob","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","MediaType"],"MediaType"]}]},{"tag":"TypeConstructor","contents":[["Web","File","Blob"],"Blob"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Creates a Blob from an Array of strings with the given Mediatype\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[103,1],"name":".spago/node-buffer/v7.0.1/src/Node/Buffer/Immutable.purs","end":[103,59]},"score":8,"packageInfo":{"values":["node-buffer"],"tag":"Package"},"name":"concat'","moduleName":"Node.Buffer.Immutable","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Node","Buffer","Immutable"],"ImmutableBuffer"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Node","Buffer","Immutable"],"ImmutableBuffer"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Concatenates a list of buffers, combining them into a new buffer of the\nspecified length.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[5632,1],"name":".spago/unicode/v5.0.1/src/Data/CodePoint/Unicode/Internal.purs","end":[5632,42]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"checkAttrS","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[5624,1],"name":".spago/unicode/v5.0.1/src/Data/CodePoint/Unicode/Internal.purs","end":[5624,41]},"score":1,"packageInfo":{"values":["unicode"],"tag":"Package"},"name":"checkAttr","moduleName":"Data.CodePoint.Unicode.Internal","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[74,1],"name":"src/Internal/NativeScripts.purs","end":[74,63]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"getMaximumSigners","moduleName":"Ctl.Internal.NativeScripts","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Serialization","Hash"],"Ed25519KeyHash"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","NativeScript"],"NativeScript"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Used for fee calculation.\nWe try to calculate maximum number of signers from the script itself,\nfollowing its logic.\nBut we must not count `requiredSigners` as signers from native scripts\ntwice, because that would lead to excessive fees. Hence we accept a set\nof already known signers to be ignored in this function.\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[866,1],"name":"src/Internal/Deserialization/Transaction.purs","end":[869,19]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"_convertCert","moduleName":"Ctl.Internal.Deserialization.Transaction","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Ctl","Internal","Deserialization","Transaction"],"CertConvHelper"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Certificate"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Serialization","Types"],"Certificate"]}]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Certificate"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[52,1],"name":"src/Internal/BalanceTx/RedeemerIndex.purs","end":[52,64]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"attachRedeemers","moduleName":"Ctl.Internal.BalanceTx.RedeemerIndex","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Redeemer"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Transaction"]}]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Transaction"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[55,1],"name":"src/Internal/BalanceTx/RedeemerIndex.purs","end":[55,78]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"attachIndexedRedeemers","moduleName":"Ctl.Internal.BalanceTx.RedeemerIndex","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","BalanceTx","RedeemerIndex"],"IndexedRedeemer"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Transaction"]}]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Transaction"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[42,1],"name":"src/Internal/BalanceTx/Collateral.purs","end":[42,80]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"addTxCollateral","moduleName":"Ctl.Internal.BalanceTx.Collateral","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","TransactionUnspentOutput"],"TransactionUnspentOutput"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Transaction"]}]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Cardano","Types","Transaction"],"Transaction"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[24,1],"name":".spago/ansi/v6.1.0/src/Ansi/Output.purs","end":[24,63]},"score":2,"packageInfo":{"values":["ansi"],"tag":"Package"},"name":"withGraphics","moduleName":"Ansi.Output","info":{"values":[{"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeConstructor","contents":[["Ansi","Codes"],"GraphicsParam"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Wrap the given text in escape codes corresponding to the given parameters.\nFor example:\n\n```purescript\nConsole.log $ withGraphics (bold <> underline <> foreground BrightRed) \"hello world\"\n```\n\nwould print \"hello world\" to the terminal, bold, underlined, and in bright\nred, and then reset (so that further logging to the console uses the\nnormal color and style).\n\nThis function simply wraps the given text in an escape code and a reset\ncode, so that it is a little more comfortable to use than the functions\nin `Ansi.Codes`.\n"}],"tag":"SearchResult"}]