// This file was generated by purescript-docs-search
window.DocsSearchTypeIndex["212108664"] = [{"values":[{"sourceSpan":{"start":[436,1],"name":".spago/parsing/v10.2.0/src/Parsing/String/Replace.purs","end":[442,14]},"score":1,"packageInfo":{"values":["parsing"],"tag":"Package"},"name":"replaceT","moduleName":"Parsing.String.Replace","info":{"values":[{"type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Parsing"],"ParserT"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":"Monad transformer version of `replace`.\n\n#### Example\n\nFind an environment variable in curly braces and replace it with its value\nfrom the environment.\nWe can read from the environment with `lookupEnv` because `replaceT` is\nrunning the `sep` parser in `Effect`.\n\n```purescript\nreplaceT \"◀ {HOME} ▶\" do\n  _ <- string \"{\"\n  Tuple variable _ <- anyTill (string \"}\")\n  lift (lookupEnv variable) >>= maybe empty pure\n```\n\nResult:\n\n```purescript\n\"◀ /home/jbrock ▶\"\n```\n\n[![Perl Problems](https://imgs.xkcd.com/comics/perl_problems.png)](https://xkcd.com/1171/)\n"}],"tag":"SearchResult"},{"values":[{"sourceSpan":{"start":[66,1],"name":"src/Internal/BalanceTx/Types.purs","end":[70,16]},"score":0,"packageInfo":{"values":[],"tag":"LocalPackage"},"name":"withBalanceTxConstraints","moduleName":"Ctl.Internal.BalanceTx.Types","info":{"values":[{"type":{"tag":"ForAll","contents":["a",{"tag":"TypeConstructor","contents":[["Prim"],"Type"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","BalanceTx","Constraints"],"BalanceTxConstraintsBuilder"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Trans"],"ReaderT"]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","BalanceTx","Types"],"BalanceTxMContext"]}]},{"tag":"TypeConstructor","contents":[["Ctl","Internal","Contract","Monad"],"Contract"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Ctl","Internal","Contract","Monad"],"Contract"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}}],"tag":"ValueResult"},"hashAnchor":"v","comments":null}],"tag":"SearchResult"}]